//
// SpecialImages.hpp
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus
///////////////////////////////////////////////////////////////////////////
// Vector types with external visibility from ispc code
///////////////////////////////////////////////////////////////////////////

#ifndef __ISPC_VECTOR_int32_t2__
#define __ISPC_VECTOR_int32_t2__
#ifdef _MSC_VER
__declspec( align(16) ) struct int32_t2 { int32_t v[2]; };
#else
struct int32_t2 { int32_t v[2]; } __attribute__ ((aligned(16)));
#endif
#endif

#ifndef __ISPC_VECTOR_int32_t4__
#define __ISPC_VECTOR_int32_t4__
#ifdef _MSC_VER
__declspec( align(16) ) struct int32_t4 { int32_t v[4]; };
#else
struct int32_t4 { int32_t v[4]; } __attribute__ ((aligned(16)));
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Enumerator types with external visibility from ispc code
///////////////////////////////////////////////////////////////////////////

#ifndef __ISPC_ENUM_ZnccError__
#define __ISPC_ENUM_ZnccError__
enum ZnccError {
    errSuccess = 0,
    errInvalid = 1,
    errNoMem = 2,
    errRange = 3,
    errSizeMismatch = 4 
};
#endif


#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_Image__
#define __ISPC_STRUCT_Image__
struct Image {
    int32_t2  size;
    int32_t4  roi;
    float * elements;
};
#endif

#ifndef __ISPC_STRUCT_SpecialImages__
#define __ISPC_STRUCT_SpecialImages__
struct SpecialImages {
    struct Image ZeroBgOneFg;
    struct Image OneBgZeroFg;
    struct Image RandBgZeroFg;
    struct Image FltMaxBgZeroFg;
    struct Image AllRand;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void Image_Add(struct Image &destination, const struct Image &source);
    extern enum ZnccError Image_Clone(struct Image &destination, const struct Image &source);
    extern void Image_Delete(struct Image &image);
    extern void Image_GetAttributes(const struct Image &image, int32_t2   &size, int32_t4   &rect);
    extern enum ZnccError Image_GetPackedImage(uint8_t * packedImage, const struct Image &image);
    extern enum ZnccError Image_GetPackedImageF(float * packedImage, const struct Image &image);
    extern void Image_Integrate(struct Image &image);
    extern void Image_Multiply(struct Image &destination, const struct Image &source);
    extern enum ZnccError Image_New(struct Image &image, const int32_t2   &size, const int32_t4   &roi);
    extern enum ZnccError Image_SetPackedImage(struct Image &image, const uint8_t * packedImage, const int32_t2   &packedSize, const int32_t4   &margin);
    extern enum ZnccError Image_SetPackedImageF(struct Image &image, const float * packedImage, const int32_t2   &packedSize, const int32_t4   &margin);
    extern void Image_Subtract(struct Image &destination, const struct Image &source);
    extern void Image_Sum(const struct Image &src, const int32_t4   &sumRect, struct Image &sums);
    extern void SpecialImages_Create(struct SpecialImages &si, const int32_t2   &size, const int32_t4   &roi);
    extern void SpecialImages_Delete(struct SpecialImages &si);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
